DROP DATABASE IF EXISTS BRAIN_DB;
CREATE DATABASE IF NOT EXISTS BRAIN_DB;
USE BRAIN_DB;

DROP TABLE IF EXISTS user_table;
CREATE TABLE user_table
(
	COD_USER BIGINT NOT NULL AUTO_INCREMENT,
	MAIL_USER VARCHAR(50) NOT NULL,
	NAME_USER VARCHAR(60) NOT NULL,
	PASSWORD_USER VARCHAR(200) NOT NULL,
	POINTS_USER INT NOT NULL,
	IMAGE VARCHAR(200),
	ACTIVE TINYINT,
	USER_ONLINE TINYINT,
	PRIMARY KEY(COD_USER)
);

INSERT INTO user_table(NAME_USER, MAIL_USER, PASSWORD_USER, POINTS_USER, IMAGE, ACTIVE, USER_ONLINE) /*encripted default password (qwe123) and default black profile picture*/
	VALUES('Hiago Indalécio', 'hiagoindalecio@gmail.com', '$2b$10$ZvEDr3dJ9AUFCRT6xQYhGeKbGEr0DZS.JnNocBJ.QDPYVtdQROpZ6', 20, 'blank-profile.webp', 1, 0),
		  ('Felipe Ricardo', 'felipemelo@gmail.com', '$2b$10$ZvEDr3dJ9AUFCRT6xQYhGeKbGEr0DZS.JnNocBJ.QDPYVtdQROpZ6', 0, 'blank-profile.webp', 1, 0);

CREATE TABLE user_notes
(
	COD_NOTE BIGINT NOT NULL AUTO_INCREMENT,
	COD_USER BIGINT NOT NULL,
	SUMMARY_NOTE VARCHAR(50) NOT NULL,
	DESCRI_NOTE VARCHAR(3000),
	PRIMARY KEY(COD_NOTE),
	CONSTRAINT fk_user
	FOREIGN KEY (COD_USER)
	REFERENCES user_table(COD_USER)
);

INSERT INTO user_notes(COD_USER, SUMMARY_NOTE, DESCRI_NOTE)
	VALUES(1, 'Cores favoritas', 'Marry - Roxo\nAmy - Azul');

CREATE TABLE user_checkpoint
(
	COD_CHECK BIGINT NOT NULL AUTO_INCREMENT,
	COD_USER BIGINT NOT NULL,
	SUMMARY_CHECK VARCHAR(50) NOT NULL,
	DESCRI_CHECK VARCHAR(3000),
	DATA_CHECK DATE,
	STATUS_CHECK TINYINT(1) NOT NULL,
	PRIMARY KEY(COD_CHECK),
	CONSTRAINT fk_mem_user
	FOREIGN KEY (COD_USER)
	REFERENCES user_table(COD_USER)
);

INSERT INTO user_checkpoint(COD_USER, SUMMARY_CHECK, DESCRI_CHECK, DATA_CHECK, STATUS_CHECK)
	VALUES(1, 'Terminar projeto', 'Finalizar projeto em React até o fim de dezembro.', '2021-02-20', 1),
		  (1, 'Andar de skate', 'AAAAAAAA', '2021-02-20', 0);

CREATE TABLE checkpoint_tasks
(
	COD_TASK BIGINT NOT NULL AUTO_INCREMENT,
	COD_CHECK BIGINT NOT NULL,
	SUMMARY_TASK VARCHAR(50) NOT NULL,
	DESCRI_TASK VARCHAR(3000),
	STATUS_TASK TINYINT(1) NOT NULL,
	PRIMARY KEY(COD_TASK),
	CONSTRAINT fk_task_check
	FOREIGN KEY (COD_CHECK)
	REFERENCES user_checkpoint(COD_CHECK)
);

INSERT INTO checkpoint_tasks(COD_CHECK, SUMMARY_TASK, DESCRI_TASK, STATUS_TASK)
	VALUES(1, 'Desenvolver a API.', 'Desenvolver a API em junção com o banco de dados.', 1);

CREATE TABLE memory_user
(
	COD_MEMORY BIGINT NOT NULL AUTO_INCREMENT,
	COD_USER BIGINT NOT NULL,
	SUMMARY_MEMORY VARCHAR(15) NOT NULL,
	DESCRI_MEMORY VARCHAR(3000),
	PRIMARY KEY(COD_MEMORY),
	CONSTRAINT fk_mem_user
	FOREIGN KEY (COD_USER)
	REFERENCES user_table(COD_USER)
);

INSERT INTO memory_user(COD_USER, SUMMARY_MEMORY, DESCRI_MEMORY)
	VALUES(1, 'Minha mãe.', 'Minha mãe se chama Carmen Lúcia Lima e sempre foi muito dedicada em me fazer feliz.');

DROP TABLE IF EXISTS friends_user;
CREATE TABLE friends_user
(
	ID_FRIENDSHIP BIGINT NOT NULL AUTO_INCREMENT,
	COD_FRIEND BIGINT NOT NULL,
	COD_USER BIGINT NOT NULL,
	ACCEPTED TINYINT(1) NOT NULL,
	PRIMARY KEY (ID_FRIENDSHIP),
	CONSTRAINT fk_friend_user
	FOREIGN KEY (COD_FRIEND)
	REFERENCES user_table(COD_USER),
	CONSTRAINT fk_user_friend
	FOREIGN KEY (COD_USER)
	REFERENCES user_table(COD_USER)
);

INSERT INTO friends_user(COD_FRIEND, COD_USER, ACCEPTED)
	VALUES(2, 1, 1),
		  (1, 2, 1);

DROP TABLE IF EXISTS activity_type;
CREATE TABLE activity_type
(
	COD_TYPE BIGINT NOT NULL AUTO_INCREMENT,
	DESCRIPTION VARCHAR(60),
	PRIMARY KEY (COD_TYPE)
);

INSERT INTO activity_type(DESCRIPTION)
	VALUES('completou um checkpoint e recebou 20 pontos de score'),
		  ('adicionou um checkpoint'),
		  ('excluiu um checkpoint'),
		  ('editou um checkpoint'),
		  ('completou uma task e recebou 10 pontos de score'),
		  ('adicionou uma task'),
		  ('excluiu uma task'),
		  ('editou uma task');

DROP TABLE IF EXISTS user_activity;
CREATE TABLE user_activity
(
	COD_ACTIVITY BIGINT NOT NULL AUTO_INCREMENT,
	COD_TYPE BIGINT NOT NULL,
	COD_USER BIGINT NOT NULL,
	DESCRIPTION VARCHAR(50) NOT NULL,
	UPDATETIME DATETIME NOT NULL,
	PRIMARY KEY (COD_ACTIVITY),
	CONSTRAINT fk_activity_type
	FOREIGN KEY (COD_TYPE)
	REFERENCES activity_type(COD_TYPE),
	CONSTRAINT fk_activity_user
	FOREIGN KEY (COD_USER)
	REFERENCES user_table(COD_USER)
);

INSERT INTO user_activity(COD_TYPE, COD_USER, DESCRIPTION, UPDATETIME)
	VALUES(1, 1, 'Andar de skate', NOW());